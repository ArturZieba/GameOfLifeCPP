//Includes sorted first by corresponding header file at the top, then system headers alphabetically
#include "GOL.h"

//#include <algorithm> //For std::generate()
#include <array> //For std::array<>
//#include <cstdlib> //For std::rand() - theoretically not needed, iostream > istream > ostream > ios > xlocnum already includes cstdlib, but it's still good practice to state includes explicitly
#include <iostream> //For std::cout
#include <random> //Contains superior randomization functions to rand() and srand() in <cstdlib>

int main()
{
	GOL::DrawGrid();
	Cell::IsAlive();
}

//TEMP: Draw a grid in the Console
void GOL::DrawGrid()
{
	std::default_random_engine Generator; //Random number generator
	std::bernoulli_distribution Distribution; //Bernoulli distribution for bool - there should be around 50:50 true:false distribution without (double) stated in the declaration
	
	//Game Of Life grid arrays - using std::array<> instead of int[][] because of added functionality
	std::array<std::array<int, GOL::GridSizeY>, GOL::GridSizeX> GridPrinted{}; //Grid that is printed to the Console
	std::array<std::array<int, GOL::GridSizeY>, GOL::GridSizeX> GridCalculated{}; //"Buffer" grid that is used for calculating cells states

	//Range-based for loop to randomly populate the GridPrinted array; auto& to deduce the element type instead of typing template in and & because there is no need for more copies of this array, just the modification of it
	for (auto& Element : GridPrinted)
	{
		//std::generate fills a container in a specified range (.begin/.end - iterators pointing to first/past-the-end elements) with values generated by the specified generator function object - used lambda expression here
		//Lambda contains has in [&]() so that Generator/Distribution are in its capture list
		//Distribution(Generator) Generates a random boolean based on the randomly generated number with a set distribution (should be 50:50)
		//TEMP: Maybe change lambda to a regular function?
		std::generate(Element.begin(), Element.end(), [&]() { return Distribution(Generator) ? 1 : 0; });
	}

	/* //Check generated array elements
	for (auto& a : GridPrinted)
	{
		for (auto& b : a)
		{
			std::cout << b;
		}
		std::cout << std::endl;
	}
	*/
}

//TEMP: Print a string to the Console, currently to check function call from both GOL and Cell classes
void Cell::IsAlive()
{
	std::cout << "Dead or Alive";
	std::cout << std::endl;
}